//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""201c4812-2342-4c01-b85d-b6e98dccc3c8"",
            ""actions"": [
                {
                    ""name"": ""Silver"",
                    ""type"": ""Button"",
                    ""id"": ""ce70affc-6ee7-4c3b-bd02-48b1d501080d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""6849c63e-494b-4eab-8f35-3fbc05636bc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceImagePlate"",
                    ""type"": ""Button"",
                    ""id"": ""3b85c415-2869-4466-8cc4-79d930996772"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceSGMagnet"",
                    ""type"": ""Button"",
                    ""id"": ""4428f268-315d-48bc-ae89-08a990781512"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4c17ec9f-3f16-41b9-aefd-8e217de95b4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""135631db-c442-42f7-afa8-53c303b6d550"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteNode"",
                    ""type"": ""Button"",
                    ""id"": ""4fe45b07-48dd-4d7a-8893-a65fe7391c09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Freeze"",
                    ""type"": ""Button"",
                    ""id"": ""8876fbb3-91e1-4777-8749-e328db53ae3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a304478f-15ed-43eb-b52d-9d37fe73ca8b"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Silver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dcc7b1e-1f34-4b24-9908-31bb37042cd4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd0b1935-078a-4131-a9bd-54cfa896c24c"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceImagePlate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8565ff9-a3c3-4bd3-9eb9-57bb4dff86b1"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceSGMagnet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28234ba4-197a-4ada-82d8-b50ddeb36fa1"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9563a5c-93ac-44b6-8bbf-ccc3d96522f7"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fd980db-3487-4129-87ef-86ef467df08e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteNode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""636805e7-b721-48e1-bc81-d120515caf92"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Silver = m_Control.FindAction("Silver", throwIfNotFound: true);
        m_Control_MouseLeftClick = m_Control.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_Control_PlaceImagePlate = m_Control.FindAction("PlaceImagePlate", throwIfNotFound: true);
        m_Control_PlaceSGMagnet = m_Control.FindAction("PlaceSGMagnet", throwIfNotFound: true);
        m_Control_RotateLeft = m_Control.FindAction("RotateLeft", throwIfNotFound: true);
        m_Control_RotateRight = m_Control.FindAction("RotateRight", throwIfNotFound: true);
        m_Control_DeleteNode = m_Control.FindAction("DeleteNode", throwIfNotFound: true);
        m_Control_Freeze = m_Control.FindAction("Freeze", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private IControlActions m_ControlActionsCallbackInterface;
    private readonly InputAction m_Control_Silver;
    private readonly InputAction m_Control_MouseLeftClick;
    private readonly InputAction m_Control_PlaceImagePlate;
    private readonly InputAction m_Control_PlaceSGMagnet;
    private readonly InputAction m_Control_RotateLeft;
    private readonly InputAction m_Control_RotateRight;
    private readonly InputAction m_Control_DeleteNode;
    private readonly InputAction m_Control_Freeze;
    public struct ControlActions
    {
        private @InputControl m_Wrapper;
        public ControlActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Silver => m_Wrapper.m_Control_Silver;
        public InputAction @MouseLeftClick => m_Wrapper.m_Control_MouseLeftClick;
        public InputAction @PlaceImagePlate => m_Wrapper.m_Control_PlaceImagePlate;
        public InputAction @PlaceSGMagnet => m_Wrapper.m_Control_PlaceSGMagnet;
        public InputAction @RotateLeft => m_Wrapper.m_Control_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_Control_RotateRight;
        public InputAction @DeleteNode => m_Wrapper.m_Control_DeleteNode;
        public InputAction @Freeze => m_Wrapper.m_Control_Freeze;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void SetCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterface != null)
            {
                @Silver.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnSilver;
                @Silver.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnSilver;
                @Silver.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnSilver;
                @MouseLeftClick.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnMouseLeftClick;
                @PlaceImagePlate.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceImagePlate;
                @PlaceImagePlate.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceImagePlate;
                @PlaceImagePlate.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceImagePlate;
                @PlaceSGMagnet.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceSGMagnet;
                @PlaceSGMagnet.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceSGMagnet;
                @PlaceSGMagnet.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnPlaceSGMagnet;
                @RotateLeft.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnRotateRight;
                @DeleteNode.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnDeleteNode;
                @DeleteNode.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnDeleteNode;
                @DeleteNode.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnDeleteNode;
                @Freeze.started -= m_Wrapper.m_ControlActionsCallbackInterface.OnFreeze;
                @Freeze.performed -= m_Wrapper.m_ControlActionsCallbackInterface.OnFreeze;
                @Freeze.canceled -= m_Wrapper.m_ControlActionsCallbackInterface.OnFreeze;
            }
            m_Wrapper.m_ControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Silver.started += instance.OnSilver;
                @Silver.performed += instance.OnSilver;
                @Silver.canceled += instance.OnSilver;
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
                @PlaceImagePlate.started += instance.OnPlaceImagePlate;
                @PlaceImagePlate.performed += instance.OnPlaceImagePlate;
                @PlaceImagePlate.canceled += instance.OnPlaceImagePlate;
                @PlaceSGMagnet.started += instance.OnPlaceSGMagnet;
                @PlaceSGMagnet.performed += instance.OnPlaceSGMagnet;
                @PlaceSGMagnet.canceled += instance.OnPlaceSGMagnet;
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @DeleteNode.started += instance.OnDeleteNode;
                @DeleteNode.performed += instance.OnDeleteNode;
                @DeleteNode.canceled += instance.OnDeleteNode;
                @Freeze.started += instance.OnFreeze;
                @Freeze.performed += instance.OnFreeze;
                @Freeze.canceled += instance.OnFreeze;
            }
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnSilver(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnPlaceImagePlate(InputAction.CallbackContext context);
        void OnPlaceSGMagnet(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnDeleteNode(InputAction.CallbackContext context);
        void OnFreeze(InputAction.CallbackContext context);
    }
}
