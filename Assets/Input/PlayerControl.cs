//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SternGerlach.Input
{
    public partial class @PlayerControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""1d938242-6288-40ef-a883-13af4b308bb8"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1fe92e08-82db-41ee-95e5-e37e6020151e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""85aa8da6-8dd2-4783-ac1a-c8fe65cce294"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c963f306-5fa3-47bb-a08d-3c0422877443"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMB"",
                    ""type"": ""Value"",
                    ""id"": ""d3ee026c-4462-4e25-a676-1a3257150e65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LMB"",
                    ""type"": ""Value"",
                    ""id"": ""ae0b5916-2c11-4a95-b5e4-db9db538138b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LShift"",
                    ""type"": ""Value"",
                    ""id"": ""0e569e33-8700-413e-9c49-9b9a0c999191"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Macro"",
                    ""type"": ""Button"",
                    ""id"": ""a2351f55-215c-4626-915c-1d946349644c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Silver"",
                    ""type"": ""Button"",
                    ""id"": ""0876f4fe-79e9-423f-835f-d29883ad9808"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""838e7bd2-dc36-4ebb-9c48-5bcbb3e754b2"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45085728-57cb-4238-b406-b73c84bf72df"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a5a0ad2-09ba-4a19-b3b5-decd23d49f95"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c3fbb1b-48cf-4109-af72-37f28d8e40d1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""151f7db5-a43e-4f10-8f11-5b1f672511fc"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""987a1810-59ef-4e43-b7fd-b54ca8148384"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d8957e3-b3ad-473d-a8eb-7423ee4fc18f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Macro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e22ea8f0-14b0-4f6b-87bc-5195b5a0c49d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Silver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""2ac87f3b-8256-48d6-a42b-28a343ce5824"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0993a3f3-10cc-4adc-a706-ee4ffe4af767"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""5cbc1b46-9267-4d8e-915c-eb74825a241d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIToggle"",
                    ""type"": ""Button"",
                    ""id"": ""455e7c4d-91e3-4c6d-a608-010f73f7f974"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MCQPrediction"",
                    ""type"": ""Button"",
                    ""id"": ""641674eb-b4aa-4ca3-ba7e-a6d04ba56e3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eef20a08-8a2c-40e7-b8ed-3a61eefcc5bb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d7edd5a-15f0-4737-a865-0b4ca122b39f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7092254-7a95-4695-a700-fe43fdb59e54"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UIToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abe0cc97-5e7e-4175-9c8e-def66850b803"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MCQPrediction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_MouseX = m_Game.FindAction("MouseX", throwIfNotFound: true);
            m_Game_MouseY = m_Game.FindAction("MouseY", throwIfNotFound: true);
            m_Game_Zoom = m_Game.FindAction("Zoom", throwIfNotFound: true);
            m_Game_RMB = m_Game.FindAction("RMB", throwIfNotFound: true);
            m_Game_LMB = m_Game.FindAction("LMB", throwIfNotFound: true);
            m_Game_LShift = m_Game.FindAction("LShift", throwIfNotFound: true);
            m_Game_Macro = m_Game.FindAction("Macro", throwIfNotFound: true);
            m_Game_Silver = m_Game.FindAction("Silver", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_MousePosition = m_UI.FindAction("MousePosition", throwIfNotFound: true);
            m_UI_Space = m_UI.FindAction("Space", throwIfNotFound: true);
            m_UI_UIToggle = m_UI.FindAction("UIToggle", throwIfNotFound: true);
            m_UI_MCQPrediction = m_UI.FindAction("MCQPrediction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Game
        private readonly InputActionMap m_Game;
        private IGameActions m_GameActionsCallbackInterface;
        private readonly InputAction m_Game_MouseX;
        private readonly InputAction m_Game_MouseY;
        private readonly InputAction m_Game_Zoom;
        private readonly InputAction m_Game_RMB;
        private readonly InputAction m_Game_LMB;
        private readonly InputAction m_Game_LShift;
        private readonly InputAction m_Game_Macro;
        private readonly InputAction m_Game_Silver;
        public struct GameActions
        {
            private @PlayerControl m_Wrapper;
            public GameActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseX => m_Wrapper.m_Game_MouseX;
            public InputAction @MouseY => m_Wrapper.m_Game_MouseY;
            public InputAction @Zoom => m_Wrapper.m_Game_Zoom;
            public InputAction @RMB => m_Wrapper.m_Game_RMB;
            public InputAction @LMB => m_Wrapper.m_Game_LMB;
            public InputAction @LShift => m_Wrapper.m_Game_LShift;
            public InputAction @Macro => m_Wrapper.m_Game_Macro;
            public InputAction @Silver => m_Wrapper.m_Game_Silver;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void SetCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterface != null)
                {
                    @MouseX.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseX;
                    @MouseX.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseX;
                    @MouseX.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseX;
                    @MouseY.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseY;
                    @MouseY.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseY;
                    @MouseY.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseY;
                    @Zoom.started -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnZoom;
                    @RMB.started -= m_Wrapper.m_GameActionsCallbackInterface.OnRMB;
                    @RMB.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnRMB;
                    @RMB.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnRMB;
                    @LMB.started -= m_Wrapper.m_GameActionsCallbackInterface.OnLMB;
                    @LMB.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnLMB;
                    @LMB.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnLMB;
                    @LShift.started -= m_Wrapper.m_GameActionsCallbackInterface.OnLShift;
                    @LShift.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnLShift;
                    @LShift.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnLShift;
                    @Macro.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMacro;
                    @Macro.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMacro;
                    @Macro.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMacro;
                    @Silver.started -= m_Wrapper.m_GameActionsCallbackInterface.OnSilver;
                    @Silver.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnSilver;
                    @Silver.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnSilver;
                }
                m_Wrapper.m_GameActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MouseX.started += instance.OnMouseX;
                    @MouseX.performed += instance.OnMouseX;
                    @MouseX.canceled += instance.OnMouseX;
                    @MouseY.started += instance.OnMouseY;
                    @MouseY.performed += instance.OnMouseY;
                    @MouseY.canceled += instance.OnMouseY;
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                    @RMB.started += instance.OnRMB;
                    @RMB.performed += instance.OnRMB;
                    @RMB.canceled += instance.OnRMB;
                    @LMB.started += instance.OnLMB;
                    @LMB.performed += instance.OnLMB;
                    @LMB.canceled += instance.OnLMB;
                    @LShift.started += instance.OnLShift;
                    @LShift.performed += instance.OnLShift;
                    @LShift.canceled += instance.OnLShift;
                    @Macro.started += instance.OnMacro;
                    @Macro.performed += instance.OnMacro;
                    @Macro.canceled += instance.OnMacro;
                    @Silver.started += instance.OnSilver;
                    @Silver.performed += instance.OnSilver;
                    @Silver.canceled += instance.OnSilver;
                }
            }
        }
        public GameActions @Game => new GameActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_MousePosition;
        private readonly InputAction m_UI_Space;
        private readonly InputAction m_UI_UIToggle;
        private readonly InputAction m_UI_MCQPrediction;
        public struct UIActions
        {
            private @PlayerControl m_Wrapper;
            public UIActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePosition => m_Wrapper.m_UI_MousePosition;
            public InputAction @Space => m_Wrapper.m_UI_Space;
            public InputAction @UIToggle => m_Wrapper.m_UI_UIToggle;
            public InputAction @MCQPrediction => m_Wrapper.m_UI_MCQPrediction;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @MousePosition.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMousePosition;
                    @Space.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSpace;
                    @Space.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSpace;
                    @Space.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSpace;
                    @UIToggle.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUIToggle;
                    @UIToggle.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUIToggle;
                    @UIToggle.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUIToggle;
                    @MCQPrediction.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMCQPrediction;
                    @MCQPrediction.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMCQPrediction;
                    @MCQPrediction.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMCQPrediction;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                    @Space.started += instance.OnSpace;
                    @Space.performed += instance.OnSpace;
                    @Space.canceled += instance.OnSpace;
                    @UIToggle.started += instance.OnUIToggle;
                    @UIToggle.performed += instance.OnUIToggle;
                    @UIToggle.canceled += instance.OnUIToggle;
                    @MCQPrediction.started += instance.OnMCQPrediction;
                    @MCQPrediction.performed += instance.OnMCQPrediction;
                    @MCQPrediction.canceled += instance.OnMCQPrediction;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IGameActions
        {
            void OnMouseX(InputAction.CallbackContext context);
            void OnMouseY(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnRMB(InputAction.CallbackContext context);
            void OnLMB(InputAction.CallbackContext context);
            void OnLShift(InputAction.CallbackContext context);
            void OnMacro(InputAction.CallbackContext context);
            void OnSilver(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnMousePosition(InputAction.CallbackContext context);
            void OnSpace(InputAction.CallbackContext context);
            void OnUIToggle(InputAction.CallbackContext context);
            void OnMCQPrediction(InputAction.CallbackContext context);
        }
    }
}
